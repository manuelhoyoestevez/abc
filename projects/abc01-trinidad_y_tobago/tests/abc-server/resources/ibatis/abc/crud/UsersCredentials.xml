<?xml version="1.0" encoding="ISO-8859-1" ?>

<!DOCTYPE sqlMap
		PUBLIC  "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
				"http://ibatis.apache.org/dtd/sql-map-2.dtd">


<sqlMap namespace="Abc.CRUD.UsersCredentials">


	<typeAlias alias="UsersCredentials" type="com.inetum.abc.server.model.abc.crud.UsersCredentialsDto"/>
	
	
 	<!-- Dynamic Table (LRU) -->
	<!--
	<cacheModel id="UsersCredentialsCache" type="LRU">
		<flushInterval hours="24"/>
		<flushOnExecute statement="Abc.CRUD.UsersCredentials.create"/>
		<flushOnExecute statement="Abc.CRUD.UsersCredentials.update"/>
		<flushOnExecute statement="Abc.CRUD.UsersCredentials.modify"/>
		<flushOnExecute statement="Abc.CRUD.UsersCredentials.deleteById"/>
		<flushOnExecute statement="Abc.CRUD.UsersCredentials.deleteInIds"/>
		<flushOnExecute statement="Abc.CRUD.UsersCredentials.deleteByAny"/>
		<flushOnExecute statement="Abc.CRUD.UsersCredentials.deleteAll"/>
		<property name="size" value="1000" />
	</cacheModel>
	-->

	
	<!-- ====== countAll ====== -->

	<select id="countAll" resultClass="java.lang.Integer">
	
		SELECT
			COUNT(*)
		FROM
			users_credentials
			
	</select>
	
	
	<!-- ====== getAll ====== -->

	<select id="getAll" resultMap="Abc.Mapping.UsersCredentials.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.UsersCredentials.Fields" />
		FROM
			users_credentials
		ORDER BY
			users_credentials.ID_USER_CREDENTIAL	
			
	</select>
	
	
	<!-- ====== getAllIds ====== -->

	<select id="getAllIds" resultClass="java.lang.Long">
	
		SELECT
			users_credentials.ID_USER_CREDENTIAL
		FROM
			users_credentials
		ORDER BY
			users_credentials.ID_USER_CREDENTIAL
			
	</select>


	<!-- ====== getId ====== -->

    <select id="getId" parameterClass="UsersCredentials" resultClass="java.lang.Long">

        SELECT
            users_credentials.ID_USER_CREDENTIAL
        FROM
            users_credentials

        <dynamic prepend="WHERE">
            <include refid="Abc.Mapping.UsersCredentials.EqualFilter" />
        </dynamic>

    </select>


	<!-- ====== getIds ====== -->

    <select id="getIds" parameterClass="UsersCredentials" resultClass="java.lang.Long">

        SELECT
            users_credentials.ID_USER_CREDENTIAL
        FROM
            users_credentials

        <dynamic prepend="WHERE">
            <include refid="Abc.Mapping.UsersCredentials.EqualFilter" />
        </dynamic>

        ORDER BY
            users_credentials.ID_USER_CREDENTIAL

        <include refid="Abc.Includes.PAGINATE" />

    </select>

	
	<!-- ====== countFind ====== -->

	<select id="countFind" parameterClass="UsersCredentials" resultClass="java.lang.Integer">
	
		SELECT
			COUNT(*)
		FROM
			users_credentials
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.UsersCredentials.FindFilter" />
		</dynamic>
		
	</select>
	
	
	<!-- ====== find ====== -->

	<select id="find" parameterClass="UsersCredentials" resultMap="Abc.Mapping.UsersCredentials.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.UsersCredentials.Fields" />
		FROM
			users_credentials
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.UsersCredentials.FindFilter" />
		</dynamic>
		
		<include refid="Abc.Includes.ORDER_BY" />
		<include refid="Abc.Includes.PAGINATE" />
		
	</select>
	
	
	<!-- ====== countList ====== -->

	<select id="countList" parameterClass="UsersCredentials" resultClass="java.lang.Integer">
	
		SELECT
			COUNT(*)
		FROM
			users_credentials
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.UsersCredentials.EqualFilter" />
		</dynamic>
		
	</select>
	
	
	<!-- ====== getList ====== -->

	<select id="getList" parameterClass="UsersCredentials" resultMap="Abc.Mapping.UsersCredentials.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.UsersCredentials.Fields" />
		FROM
			users_credentials
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.UsersCredentials.EqualFilter" />
		</dynamic>
		
		<include refid="Abc.Includes.ORDER_BY" />
		<include refid="Abc.Includes.PAGINATE" />
		
	</select>


	<!-- ====== getMapList ====== -->

    <select id="getMapList" parameterClass="UsersCredentials" resultClass="java.util.LinkedHashMap">

        SELECT

        <iterate property="customColumns" conjunction=",">
            $customColumns[]$
        </iterate>

        FROM
            users_credentials

        <dynamic prepend="WHERE">
            <include refid="Abc.Mapping.UsersCredentials.EqualFilter" />
        </dynamic>

        <include refid="Abc.Includes.ORDER_BY" />
        <include refid="Abc.Includes.PAGINATE" />

    </select>
	
	
	<!-- ====== getById ====== -->

	<select id="getById" parameterClass="java.lang.Long" resultMap="Abc.Mapping.UsersCredentials.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.UsersCredentials.Fields" />
		FROM
			users_credentials
		WHERE
			ID_USER_CREDENTIAL = #idUserCredential:BIGINT#
			 
	</select>


	<!-- ====== existsById ====== -->

    <select id="existsById" parameterClass="java.lang.Long" resultClass="java.lang.Integer">

        SELECT
            COUNT(*)
        FROM
            users_credentials
        WHERE
            ID_USER_CREDENTIAL = #idUserCredential:BIGINT#

    </select>
	
	
	<!-- ====== getInIds ====== -->

	<select id="getInIds" parameterClass="java.lang.String" resultMap="Abc.Mapping.UsersCredentials.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.UsersCredentials.Fields" />
		FROM
			users_credentials
		WHERE
			ID_USER_CREDENTIAL IN ($ids$)
			
	</select>
	
	
	<!-- ====== get ====== -->

	<select id="get" parameterClass="UsersCredentials" resultMap="Abc.Mapping.UsersCredentials.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.UsersCredentials.Fields" />
		FROM
			users_credentials
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.UsersCredentials.EqualFilter" />
		</dynamic>
		
	</select>


	<!-- ====== getMap ====== -->

    <select id="getMap" parameterClass="UsersCredentials" resultClass="java.util.LinkedHashMap">

        SELECT

        <iterate property="customColumns" conjunction=",">
            $customColumns[]$
        </iterate>

        FROM
            users_credentials

        <dynamic prepend="WHERE">
            <include refid="Abc.Mapping.UsersCredentials.EqualFilter" />
        </dynamic>

    </select>
	
	
	<!-- ====== create ====== -->

	<insert id="create" parameterClass="UsersCredentials">
	
		INSERT INTO users_credentials
			(
				ID_USER,
				ACTIVE,
				ACCOUNT,
				PASSWORD,
				SALT,
				LOGIN_ATTEMPTS,
				CREATION_DATE,
				LAST_LOGIN_DATE,
				EXPIRY_DATE
			)
		VALUES
			(
				#idUser:BIGINT#,
				#active:BIT#,
				#account:VARCHAR#,
				#password:VARCHAR#,
				#salt:VARCHAR#,
				#loginAttempts:INTEGER#,
				#creationDate:TIMESTAMP#,
				#lastLoginDate:TIMESTAMP#,
				#expiryDate:TIMESTAMP#
			)
			
		<selectKey resultClass="java.lang.Long" keyProperty="idUserCredential">
			SELECT last_insert_id() AS ID_USER_CREDENTIAL FROM users_credentials LIMIT 1
		</selectKey>
		
	</insert>
	
	
	<!-- ====== update ====== -->

	<update id="update" parameterClass="UsersCredentials">
	
		UPDATE users_credentials
		SET
			ID_USER = #idUser:BIGINT#,
			ACTIVE = #active:BIT#,
			ACCOUNT = #account:VARCHAR#,
			PASSWORD = #password:VARCHAR#,
			SALT = #salt:VARCHAR#,
			LOGIN_ATTEMPTS = #loginAttempts:INTEGER#,
			CREATION_DATE = #creationDate:TIMESTAMP#,
			LAST_LOGIN_DATE = #lastLoginDate:TIMESTAMP#,
			EXPIRY_DATE = #expiryDate:TIMESTAMP#
		WHERE
			ID_USER_CREDENTIAL = #idUserCredential:BIGINT#
			
	</update>
	
	
	<!-- ====== modify ====== -->

	<update id="modify" parameterClass="UsersCredentials">
	
		UPDATE users_credentials
		
		<dynamic prepend="SET">
		
			<isNotNull prepend="," property="idUser">
				ID_USER = #idUser:BIGINT#
			</isNotNull>
			
			<isNotNull prepend="," property="active">
				ACTIVE = #active:BIT#
			</isNotNull>
			
			<isNotNull prepend="," property="account">
				ACCOUNT = #account:VARCHAR#
			</isNotNull>
			
			<isNotNull prepend="," property="password">
				PASSWORD = #password:VARCHAR#
			</isNotNull>
			
			<isNotNull prepend="," property="salt">
				SALT = #salt:VARCHAR#
			</isNotNull>
			
			<isNotNull prepend="," property="loginAttempts">
				LOGIN_ATTEMPTS = #loginAttempts:INTEGER#
			</isNotNull>
			
			<isNotNull prepend="," property="creationDate">
				CREATION_DATE = #creationDate:TIMESTAMP#
			</isNotNull>
			
			<isNotNull prepend="," property="lastLoginDate">
				LAST_LOGIN_DATE = #lastLoginDate:TIMESTAMP#
			</isNotNull>
			
			<isNotNull prepend="," property="expiryDate">
				EXPIRY_DATE = #expiryDate:TIMESTAMP#
			</isNotNull>
			
		</dynamic>
		
		WHERE
			ID_USER_CREDENTIAL = #idUserCredential:BIGINT#
			
	</update>


	<!-- ====== modifyByAny ====== -->

    <!-- map("target", "filter")

    <update id="modifyByAny" parameterClass="java.util.Map">

        UPDATE users_credentials

        <dynamic prepend="SET">

            <isNotNull prepend="," property="idUser">
                ID_USER = #idUser:BIGINT#
            </isNotNull>

            <isNotNull prepend="," property="active">
                ACTIVE = #active:BIT#
            </isNotNull>

            <isNotNull prepend="," property="account">
                ACCOUNT = #account:VARCHAR#
            </isNotNull>

            <isNotNull prepend="," property="password">
                PASSWORD = #password:VARCHAR#
            </isNotNull>

            <isNotNull prepend="," property="salt">
                SALT = #salt:VARCHAR#
            </isNotNull>

            <isNotNull prepend="," property="loginAttempts">
                LOGIN_ATTEMPTS = #loginAttempts:INTEGER#
            </isNotNull>

            <isNotNull prepend="," property="creationDate">
                CREATION_DATE = #creationDate:TIMESTAMP#
            </isNotNull>

            <isNotNull prepend="," property="lastLoginDate">
                LAST_LOGIN_DATE = #lastLoginDate:TIMESTAMP#
            </isNotNull>

            <isNotNull prepend="," property="expiryDate">
                EXPIRY_DATE = #expiryDate:TIMESTAMP#
            </isNotNull>

        </dynamic>

        <dynamic prepend="WHERE">
            <isNotNull prepend="AND" property="idUserCredential">
                users_credentials.ID_USER_CREDENTIAL = #idUserCredential:BIGINT#
            </isNotNull>

            <isNotNull prepend="AND" property="idUser">
                users_credentials.ID_USER = #idUser:BIGINT#
            </isNotNull>

            <isNotNull prepend="AND" property="active">
                users_credentials.ACTIVE = #active:BIT#
            </isNotNull>

            <isNotNull prepend="AND" property="account">
                users_credentials.ACCOUNT = #account:VARCHAR#
            </isNotNull>

            <isNotNull prepend="AND" property="password">
                users_credentials.PASSWORD = #password:VARCHAR#
            </isNotNull>

            <isNotNull prepend="AND" property="salt">
                users_credentials.SALT = #salt:VARCHAR#
            </isNotNull>

            <isNotNull prepend="AND" property="loginAttempts">
                users_credentials.LOGIN_ATTEMPTS = #loginAttempts:INTEGER#
            </isNotNull>

            <isNotNull prepend="AND" property="creationDate">
                DATE(users_credentials.CREATION_DATE) = DATE(#creationDate:TIMESTAMP#)
            </isNotNull>

            <isNotNull prepend="AND" property="lastLoginDate">
                DATE(users_credentials.LAST_LOGIN_DATE) = DATE(#lastLoginDate:TIMESTAMP#)
            </isNotNull>

            <isNotNull prepend="AND" property="expiryDate">
                DATE(users_credentials.EXPIRY_DATE) = DATE(#expiryDate:TIMESTAMP#)
            </isNotNull>

        </dynamic>

    </update>
    -->
	
	
	<!-- ====== deleteById ====== -->

	<delete id="deleteById" parameterClass="java.lang.Long">
	
		DELETE FROM users_credentials
		WHERE
			ID_USER_CREDENTIAL = #idUserCredential:BIGINT#
			
	</delete>
	
	
	<!-- ====== deleteInIds ====== -->

	<delete id="deleteInIds" parameterClass="java.lang.String">
	
		DELETE FROM users_credentials
		WHERE
			ID_USER_CREDENTIAL IN ($ids$)
		
	</delete>
	
	
	<!-- ====== deleteByAny ====== -->

	<delete id="deleteByAny" parameterClass="UsersCredentials">
	
		DELETE FROM users_credentials
		
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.UsersCredentials.EqualFilter" />
		</dynamic>
		
	</delete>
	
	
	<!-- ====== deleteAll ====== -->

	<delete id="deleteAll">
	
		DELETE FROM users_credentials
		
	</delete>
	
	
</sqlMap>


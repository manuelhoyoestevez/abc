<?xml version="1.0" encoding="ISO-8859-1" ?>

<!DOCTYPE sqlMap
		PUBLIC  "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
				"http://ibatis.apache.org/dtd/sql-map-2.dtd">


<sqlMap namespace="Abc.CRUD.Verifications">


	<typeAlias alias="Verifications" type="com.inetum.abc.server.model.abc.crud.VerificationsDto"/>
	
	
 	<!-- Dynamic Table (LRU) -->
	<!--
	<cacheModel id="VerificationsCache" type="LRU">
		<flushInterval hours="24"/>
		<flushOnExecute statement="Abc.CRUD.Verifications.create"/>
		<flushOnExecute statement="Abc.CRUD.Verifications.update"/>
		<flushOnExecute statement="Abc.CRUD.Verifications.modify"/>
		<flushOnExecute statement="Abc.CRUD.Verifications.deleteById"/>
		<flushOnExecute statement="Abc.CRUD.Verifications.deleteInIds"/>
		<flushOnExecute statement="Abc.CRUD.Verifications.deleteByAny"/>
		<flushOnExecute statement="Abc.CRUD.Verifications.deleteAll"/>
		<property name="size" value="1000" />
	</cacheModel>
	-->

	
	<!-- ====== countAll ====== -->

	<select id="countAll" resultClass="java.lang.Integer">
	
		SELECT
			COUNT(*)
		FROM
			verifications
			
	</select>
	
	
	<!-- ====== getAll ====== -->

	<select id="getAll" resultMap="Abc.Mapping.Verifications.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.Verifications.Fields" />
		FROM
			verifications
		ORDER BY
			verifications.ID_VERIFICATION	
			
	</select>
	
	
	<!-- ====== getAllIds ====== -->

	<select id="getAllIds" resultClass="java.lang.Long">
	
		SELECT
			verifications.ID_VERIFICATION
		FROM
			verifications
		ORDER BY
			verifications.ID_VERIFICATION
			
	</select>


	<!-- ====== getId ====== -->

    <select id="getId" parameterClass="Verifications" resultClass="java.lang.Long">

        SELECT
            verifications.ID_VERIFICATION
        FROM
            verifications

        <dynamic prepend="WHERE">
            <include refid="Abc.Mapping.Verifications.EqualFilter" />
        </dynamic>

    </select>


	<!-- ====== getIds ====== -->

    <select id="getIds" parameterClass="Verifications" resultClass="java.lang.Long">

        SELECT
            verifications.ID_VERIFICATION
        FROM
            verifications

        <dynamic prepend="WHERE">
            <include refid="Abc.Mapping.Verifications.EqualFilter" />
        </dynamic>

        ORDER BY
            verifications.ID_VERIFICATION

        <include refid="Abc.Includes.PAGINATE" />

    </select>

	
	<!-- ====== countFind ====== -->

	<select id="countFind" parameterClass="Verifications" resultClass="java.lang.Integer">
	
		SELECT
			COUNT(*)
		FROM
			verifications
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.Verifications.FindFilter" />
		</dynamic>
		
	</select>
	
	
	<!-- ====== find ====== -->

	<select id="find" parameterClass="Verifications" resultMap="Abc.Mapping.Verifications.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.Verifications.Fields" />
		FROM
			verifications
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.Verifications.FindFilter" />
		</dynamic>
		
		<include refid="Abc.Includes.ORDER_BY" />
		<include refid="Abc.Includes.PAGINATE" />
		
	</select>
	
	
	<!-- ====== countList ====== -->

	<select id="countList" parameterClass="Verifications" resultClass="java.lang.Integer">
	
		SELECT
			COUNT(*)
		FROM
			verifications
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.Verifications.EqualFilter" />
		</dynamic>
		
	</select>
	
	
	<!-- ====== getList ====== -->

	<select id="getList" parameterClass="Verifications" resultMap="Abc.Mapping.Verifications.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.Verifications.Fields" />
		FROM
			verifications
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.Verifications.EqualFilter" />
		</dynamic>
		
		<include refid="Abc.Includes.ORDER_BY" />
		<include refid="Abc.Includes.PAGINATE" />
		
	</select>


	<!-- ====== getMapList ====== -->

    <select id="getMapList" parameterClass="Verifications" resultClass="java.util.LinkedHashMap">

        SELECT

        <iterate property="customColumns" conjunction=",">
            $customColumns[]$
        </iterate>

        FROM
            verifications

        <dynamic prepend="WHERE">
            <include refid="Abc.Mapping.Verifications.EqualFilter" />
        </dynamic>

        <include refid="Abc.Includes.ORDER_BY" />
        <include refid="Abc.Includes.PAGINATE" />

    </select>
	
	
	<!-- ====== getById ====== -->

	<select id="getById" parameterClass="java.lang.Long" resultMap="Abc.Mapping.Verifications.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.Verifications.Fields" />
		FROM
			verifications
		WHERE
			ID_VERIFICATION = #idVerification:BIGINT#
			 
	</select>


	<!-- ====== existsById ====== -->

    <select id="existsById" parameterClass="java.lang.Long" resultClass="java.lang.Integer">

        SELECT
            COUNT(*)
        FROM
            verifications
        WHERE
            ID_VERIFICATION = #idVerification:BIGINT#

    </select>
	
	
	<!-- ====== getInIds ====== -->

	<select id="getInIds" parameterClass="java.lang.String" resultMap="Abc.Mapping.Verifications.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.Verifications.Fields" />
		FROM
			verifications
		WHERE
			ID_VERIFICATION IN ($ids$)
			
	</select>
	
	
	<!-- ====== get ====== -->

	<select id="get" parameterClass="Verifications" resultMap="Abc.Mapping.Verifications.TableMapping">
	
		SELECT
			<include refid="Abc.Mapping.Verifications.Fields" />
		FROM
			verifications
			
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.Verifications.EqualFilter" />
		</dynamic>
		
	</select>


	<!-- ====== getMap ====== -->

    <select id="getMap" parameterClass="Verifications" resultClass="java.util.LinkedHashMap">

        SELECT

        <iterate property="customColumns" conjunction=",">
            $customColumns[]$
        </iterate>

        FROM
            verifications

        <dynamic prepend="WHERE">
            <include refid="Abc.Mapping.Verifications.EqualFilter" />
        </dynamic>

    </select>
	
	
	<!-- ====== create ====== -->

	<insert id="create" parameterClass="Verifications">
	
		INSERT INTO verifications
			(
				ID_OPERATION,
				ID_VERIFICATION_TYPE,
				ID_VERIFICATION_RESULT,
				DESCRIPTION,
				EXPECTED_VALUE,
				OBTAINED_VALUE,
				EXPECTED_THRESHOLD,
				OBTAINED_THRESHOLD,
				ID_REFERENCE_IMAGE,
				ID_OBTAINED_IMAGE,
				X,
				Y,
				WIDTH,
				HEIGHT,
				VERIFICATION_TIME,
				VERIFICATION_ERROR,
				CREATION_DATE
			)
		VALUES
			(
				#idOperation:BIGINT#,
				#idVerificationType:BIGINT#,
				#idVerificationResult:BIGINT#,
				#description:VARCHAR#,
				#expectedValue:VARCHAR#,
				#obtainedValue:VARCHAR#,
				#expectedThreshold:DECIMAL#,
				#obtainedThreshold:DECIMAL#,
				#idReferenceImage:BIGINT#,
				#idObtainedImage:BIGINT#,
				#x:INTEGER#,
				#y:INTEGER#,
				#width:INTEGER#,
				#height:INTEGER#,
				#verificationTime:DECIMAL#,
				#verificationError:VARCHAR#,
				#creationDate:TIMESTAMP#
			)
			
		<selectKey resultClass="java.lang.Long" keyProperty="idVerification">
			SELECT last_insert_id() AS ID_VERIFICATION FROM verifications LIMIT 1
		</selectKey>
		
	</insert>
	
	
	<!-- ====== update ====== -->

	<update id="update" parameterClass="Verifications">
	
		UPDATE verifications
		SET
			ID_OPERATION = #idOperation:BIGINT#,
			ID_VERIFICATION_TYPE = #idVerificationType:BIGINT#,
			ID_VERIFICATION_RESULT = #idVerificationResult:BIGINT#,
			DESCRIPTION = #description:VARCHAR#,
			EXPECTED_VALUE = #expectedValue:VARCHAR#,
			OBTAINED_VALUE = #obtainedValue:VARCHAR#,
			EXPECTED_THRESHOLD = #expectedThreshold:DECIMAL#,
			OBTAINED_THRESHOLD = #obtainedThreshold:DECIMAL#,
			ID_REFERENCE_IMAGE = #idReferenceImage:BIGINT#,
			ID_OBTAINED_IMAGE = #idObtainedImage:BIGINT#,
			X = #x:INTEGER#,
			Y = #y:INTEGER#,
			WIDTH = #width:INTEGER#,
			HEIGHT = #height:INTEGER#,
			VERIFICATION_TIME = #verificationTime:DECIMAL#,
			VERIFICATION_ERROR = #verificationError:VARCHAR#,
			CREATION_DATE = #creationDate:TIMESTAMP#
		WHERE
			ID_VERIFICATION = #idVerification:BIGINT#
			
	</update>
	
	
	<!-- ====== modify ====== -->

	<update id="modify" parameterClass="Verifications">
	
		UPDATE verifications
		
		<dynamic prepend="SET">
		
			<isNotNull prepend="," property="idOperation">
				ID_OPERATION = #idOperation:BIGINT#
			</isNotNull>
			
			<isNotNull prepend="," property="idVerificationType">
				ID_VERIFICATION_TYPE = #idVerificationType:BIGINT#
			</isNotNull>
			
			<isNotNull prepend="," property="idVerificationResult">
				ID_VERIFICATION_RESULT = #idVerificationResult:BIGINT#
			</isNotNull>
			
			<isNotNull prepend="," property="description">
				DESCRIPTION = #description:VARCHAR#
			</isNotNull>
			
			<isNotNull prepend="," property="expectedValue">
				EXPECTED_VALUE = #expectedValue:VARCHAR#
			</isNotNull>
			
			<isNotNull prepend="," property="obtainedValue">
				OBTAINED_VALUE = #obtainedValue:VARCHAR#
			</isNotNull>
			
			<isNotNull prepend="," property="expectedThreshold">
				EXPECTED_THRESHOLD = #expectedThreshold:DECIMAL#
			</isNotNull>
			
			<isNotNull prepend="," property="obtainedThreshold">
				OBTAINED_THRESHOLD = #obtainedThreshold:DECIMAL#
			</isNotNull>
			
			<isNotNull prepend="," property="idReferenceImage">
				ID_REFERENCE_IMAGE = #idReferenceImage:BIGINT#
			</isNotNull>
			
			<isNotNull prepend="," property="idObtainedImage">
				ID_OBTAINED_IMAGE = #idObtainedImage:BIGINT#
			</isNotNull>
			
			<isNotNull prepend="," property="x">
				X = #x:INTEGER#
			</isNotNull>
			
			<isNotNull prepend="," property="y">
				Y = #y:INTEGER#
			</isNotNull>
			
			<isNotNull prepend="," property="width">
				WIDTH = #width:INTEGER#
			</isNotNull>
			
			<isNotNull prepend="," property="height">
				HEIGHT = #height:INTEGER#
			</isNotNull>
			
			<isNotNull prepend="," property="verificationTime">
				VERIFICATION_TIME = #verificationTime:DECIMAL#
			</isNotNull>
			
			<isNotNull prepend="," property="verificationError">
				VERIFICATION_ERROR = #verificationError:VARCHAR#
			</isNotNull>
			
			<isNotNull prepend="," property="creationDate">
				CREATION_DATE = #creationDate:TIMESTAMP#
			</isNotNull>
			
		</dynamic>
		
		WHERE
			ID_VERIFICATION = #idVerification:BIGINT#
			
	</update>


	<!-- ====== modifyByAny ====== -->

    <!-- map("target", "filter")

    <update id="modifyByAny" parameterClass="java.util.Map">

        UPDATE verifications

        <dynamic prepend="SET">

            <isNotNull prepend="," property="idOperation">
                ID_OPERATION = #idOperation:BIGINT#
            </isNotNull>

            <isNotNull prepend="," property="idVerificationType">
                ID_VERIFICATION_TYPE = #idVerificationType:BIGINT#
            </isNotNull>

            <isNotNull prepend="," property="idVerificationResult">
                ID_VERIFICATION_RESULT = #idVerificationResult:BIGINT#
            </isNotNull>

            <isNotNull prepend="," property="description">
                DESCRIPTION = #description:VARCHAR#
            </isNotNull>

            <isNotNull prepend="," property="expectedValue">
                EXPECTED_VALUE = #expectedValue:VARCHAR#
            </isNotNull>

            <isNotNull prepend="," property="obtainedValue">
                OBTAINED_VALUE = #obtainedValue:VARCHAR#
            </isNotNull>

            <isNotNull prepend="," property="expectedThreshold">
                EXPECTED_THRESHOLD = #expectedThreshold:DECIMAL#
            </isNotNull>

            <isNotNull prepend="," property="obtainedThreshold">
                OBTAINED_THRESHOLD = #obtainedThreshold:DECIMAL#
            </isNotNull>

            <isNotNull prepend="," property="idReferenceImage">
                ID_REFERENCE_IMAGE = #idReferenceImage:BIGINT#
            </isNotNull>

            <isNotNull prepend="," property="idObtainedImage">
                ID_OBTAINED_IMAGE = #idObtainedImage:BIGINT#
            </isNotNull>

            <isNotNull prepend="," property="x">
                X = #x:INTEGER#
            </isNotNull>

            <isNotNull prepend="," property="y">
                Y = #y:INTEGER#
            </isNotNull>

            <isNotNull prepend="," property="width">
                WIDTH = #width:INTEGER#
            </isNotNull>

            <isNotNull prepend="," property="height">
                HEIGHT = #height:INTEGER#
            </isNotNull>

            <isNotNull prepend="," property="verificationTime">
                VERIFICATION_TIME = #verificationTime:DECIMAL#
            </isNotNull>

            <isNotNull prepend="," property="verificationError">
                VERIFICATION_ERROR = #verificationError:VARCHAR#
            </isNotNull>

            <isNotNull prepend="," property="creationDate">
                CREATION_DATE = #creationDate:TIMESTAMP#
            </isNotNull>

        </dynamic>

        <dynamic prepend="WHERE">
            <isNotNull prepend="AND" property="idVerification">
                verifications.ID_VERIFICATION = #idVerification:BIGINT#
            </isNotNull>

            <isNotNull prepend="AND" property="idOperation">
                verifications.ID_OPERATION = #idOperation:BIGINT#
            </isNotNull>

            <isNotNull prepend="AND" property="idVerificationType">
                verifications.ID_VERIFICATION_TYPE = #idVerificationType:BIGINT#
            </isNotNull>

            <isNotNull prepend="AND" property="idVerificationResult">
                verifications.ID_VERIFICATION_RESULT = #idVerificationResult:BIGINT#
            </isNotNull>

            <isNotNull prepend="AND" property="description">
                verifications.DESCRIPTION = #description:VARCHAR#
            </isNotNull>

            <isNotNull prepend="AND" property="expectedValue">
                verifications.EXPECTED_VALUE = #expectedValue:VARCHAR#
            </isNotNull>

            <isNotNull prepend="AND" property="obtainedValue">
                verifications.OBTAINED_VALUE = #obtainedValue:VARCHAR#
            </isNotNull>

            <isNotNull prepend="AND" property="expectedThreshold">
                verifications.EXPECTED_THRESHOLD = #expectedThreshold:DECIMAL#
            </isNotNull>

            <isNotNull prepend="AND" property="obtainedThreshold">
                verifications.OBTAINED_THRESHOLD = #obtainedThreshold:DECIMAL#
            </isNotNull>

            <isNotNull prepend="AND" property="idReferenceImage">
                verifications.ID_REFERENCE_IMAGE = #idReferenceImage:BIGINT#
            </isNotNull>

            <isNotNull prepend="AND" property="idObtainedImage">
                verifications.ID_OBTAINED_IMAGE = #idObtainedImage:BIGINT#
            </isNotNull>

            <isNotNull prepend="AND" property="x">
                verifications.X = #x:INTEGER#
            </isNotNull>

            <isNotNull prepend="AND" property="y">
                verifications.Y = #y:INTEGER#
            </isNotNull>

            <isNotNull prepend="AND" property="width">
                verifications.WIDTH = #width:INTEGER#
            </isNotNull>

            <isNotNull prepend="AND" property="height">
                verifications.HEIGHT = #height:INTEGER#
            </isNotNull>

            <isNotNull prepend="AND" property="verificationTime">
                verifications.VERIFICATION_TIME = #verificationTime:DECIMAL#
            </isNotNull>

            <isNotNull prepend="AND" property="verificationError">
                verifications.VERIFICATION_ERROR = #verificationError:VARCHAR#
            </isNotNull>

            <isNotNull prepend="AND" property="creationDate">
                DATE(verifications.CREATION_DATE) = DATE(#creationDate:TIMESTAMP#)
            </isNotNull>

        </dynamic>

    </update>
    -->
	
	
	<!-- ====== deleteById ====== -->

	<delete id="deleteById" parameterClass="java.lang.Long">
	
		DELETE FROM verifications
		WHERE
			ID_VERIFICATION = #idVerification:BIGINT#
			
	</delete>
	
	
	<!-- ====== deleteInIds ====== -->

	<delete id="deleteInIds" parameterClass="java.lang.String">
	
		DELETE FROM verifications
		WHERE
			ID_VERIFICATION IN ($ids$)
		
	</delete>
	
	
	<!-- ====== deleteByAny ====== -->

	<delete id="deleteByAny" parameterClass="Verifications">
	
		DELETE FROM verifications
		
		<dynamic prepend="WHERE">
			<include refid="Abc.Mapping.Verifications.EqualFilter" />
		</dynamic>
		
	</delete>
	
	
	<!-- ====== deleteAll ====== -->

	<delete id="deleteAll">
	
		DELETE FROM verifications
		
	</delete>
	
	
</sqlMap>

